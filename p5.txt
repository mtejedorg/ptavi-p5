 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura?

    ==>     La captura contiene 954 paquetes. Lo podemos ver
            porque el primer paquete tiene el número 1 y el
            último tiene el número 954

 ** ¿Cuánto tiempo dura la captura?

    ==>     Nuestro útimo paquete se envió a los 56.149345
            segundos de comenzar la captura

 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?

    ==>     La captura se ha realizado en la máquina cuya
            IP es 192.168.1.34.
            Es una IP privada de clase C, ya que está en el
            rango de 192.168.0.0 a 192.168.255.255.
            Sabemos que la captura se realiza aquí ya que
            vemos su petición a 80.58.61.250 preguntando
            la IP de ekiga. El paquete 2 es la respuesta
            de dicha máquina, que indica que ekiga.net está
            en la dirección 86.64.162.35.



3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?

    ==>     Es mayor el porcentaje de UDP, con un 96.23%
            sobre el 2.10% de TCP.
            Sí, en transmisión a tiempo real no nos interesa
            tanto que el intercambio de paquetes sea totalmente
            fiable como que sea rápida. En una transmisión a
            tiempo real no tiene sentido hacer retransmisiones
            pues, para cuando llegue el paquete retransmitido,
            ya no nos interesa, y estamos consumiendo recursos
            innecesariamente.

 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?

    ==>     Podemos ver que dentro de UDP usamos RTP un 84.59%
            de los paquetes, RTCP un 0.21%, también usamos
            DNS y STP. Dentro de TCP usamos HTP. UDP junto con
            TCP e ICMP son parte del Internet Protocol V4, del
            cual son un 98.25% de los paquetes. También
            encontramos paquetes ARP (1.5%), todo dentro del
            protocolo Ethernet.

4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?

    ==>     En los segundos 7, 14, 16, 38, 39 y 55.

 ** Y los paquetes con RTP, ¿cuándo se envían?

    ==>     Se empiezan a enviar en el segundo 17 y acaban
            en el segundo 38


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.
 ** ¿Qué servicio es el utilizado en estas tramas?

    ==>     DNS (Domain Name System)

 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?

    ==>     80.58.61.250, al que se hacen las peticiones de nombres

 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?

    ==>     86.64.162.35

 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?

    ==>     Es el proceso de Resolución Inversa de DNS, por la cual se
            pregunta el nombre del dominio escribiendo la IP al revés
            seguida de in-addr-arpa

6. A continuación, hay más de una docena de tramas TCP/HTTP.
 ** ¿Podrías decir la URL que se está pidiendo?

    ==>     http://ekiga.net/ip/  lo vemos en el paquete HTTP

 ** ¿Qué user agent (UA) la está pidiendo?

    ==>     Ekiga. Lo podemos ver en el mismo paquete.

 ** ¿Qué devuelve el servidor?

    ==>     Confirma la petición con 200 OK y la dirección 83.36.48.212

 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?

    ==>     Recibimos nuestra IP pública, la que el router NAT utiliza
            para las comunicaciones con otras redes.
            En mi caso, me ha devuelto 193.147.49.62

7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.

    ==>     Porque estamos pasando de una red privada a una pública,
            y para más seguridad conviene hacer el cambio de dirección
            IP.

 ** ¿Estamos tras un NAT?

    ==>     Sí, pues es el NAT el que se encarga de realizar la
            conversión de IP privada a pública y viceversa en cada
            paquete.

8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
 ** ¿Qué dirección IP tiene el servidor Registrar?

    ==>     El servidor REGISTRAR es Ekiga, cuya IP es 83.36.48.212

 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?

    ==>     Al puerto 5063 (como el apartado anterior, lo vemos en el
            campo Message Header del paquete 46.

 ** ¿Qué método SIP utiliza el UA para registrarse?

    ==>     Utiliza el método REGISTER (Se ve en el campo Request-Line)

 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?

    ==>     Entiende INVITE, ACK, OPTIONS, BYE, CANCEL, NOTIFY, REFER, MESSAGE
            Lo vemos en la línea "Allow:"

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:
 ** ¿Se registra con éxito en el primer intento?

    ==> No. Como podemos ver en la captura, lo intenta pero recibe un 401 Unauthorized.

 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?

    ==> Debería recibir un 200 OK

 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)

    ==> El segundo REGISTER tiene un campo más, el campo Authorization

 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.

    ==> Podemos ver que el valor de Expires es de 3600 (segundos)

10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?

    ==> Sí, en el campo "From" del paquete INVITE

 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?

    ==> Contiene información sobre la sesión.
    ==> Utiliza el protocolo SDP

 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?

    ==> No, recibimos un 407 Proxy Authentication Required

 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?

    ==> Contiene un campo más, "Proxy-Authorization"
    ==> Se debe a n sistema de seguridad, por el cual el cliente debe registrarse para demostrar su identidad.

11. Una vez conectado, estudia el intercambio de tramas.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?

    ==> Utilizamos RTP (y H.261). RTP es un protocolo destinado a la transmisión de datos a tiempo real, principalmente audio y video. H.261 es un estándar de compresión de video que utiliza RTP

 ** ¿Cuál es el tamaño de paquete de los mismos?

    ==> Todos los paquetes RTP son de 214 bytes, y los de H.261 de más de 1000 bytes algunos, y otros pequeños (200-500 bytes).

 ** ¿Se utilizan bits de padding?

    ==> No, el valor de Padding es siempre False.

 ** ¿Cuál es la periodicidad de los paquetes que se envían?

    ==> Aproximadamente, cada 24 ms.

 ** ¿Cuántos bits/segundo estamos enviando?

    ==> En los mensajes RTP, que envían 214 bytes cada 24 ms, tenemos una velocidad de unos 71.3 kbps.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué?

    ==> Hay 2 flujos, ambos de la máquina 192.168.1.34 a la máquina 86.64.162.35. Uno de ellos son 196 paquetes del puerto 5014 al 19062, y el otro 611 paquetes del puerto 5010 al 12440
        Un flujo es de los paquetes RTP (puerto 5010) , y el otro de los paquetes H.261 (5014)

 ** ¿Cuántos paquetes se pierden?

    ==> Ninguno (Campo Lost es 0)

 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?

    ==> 1290.48 ms para el flujo H.261 y 1290.44 ms para el flujo RTP.
    ==> Es el tiempo máximo entre dos paquetes seguidos

 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?

    ==> Para el flujo H.261, el valor máximo de Jitter es 183.10 ms y el valor medio 153.24. Para el flujo RTP, el valor máximo de Jitter es 119.64 ms y el valor medio 42.50.
    ==> Nos dice la variación del retardo máxima y media entre todos los paquetes. 
    ==> El umbral de calidad establece un Jitter inferior a 50 ms como aceptable y uno superior como de calidad pobre. En nuestro caso, la calidad en el flujo RTP es aceptable y la calidad en el flujo H.261 es pobre.

13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?

    ==> Delta = 0.0 ms, Jitter = 0.0 ms

 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?

    ==> Al tener Delta y Jitter 0, significa que es el valor que tomamos como base para calcular valores de Delta y Jitter posteriores, por tanto es nuestro primer paquete.

 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?

    ==> El paquete 247. 

 ** ¿A qué se debe el cambio tan brusco del jitter?

    ==> A que comienzan a llegar los paquetes muy seguidos, a que la delta es casi 0, y por tanto nos llegan con anticipación con respecto al retardo original calculado.

 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?

    ==> El delta de este paquete indica que ha pasado más de medio segundo desde el paquete anterior. La variación de retardo es pequeña comparada al retardo que ha tenido.

 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?

    ==> Wireshark utiliza la fórmula:
           J(i) = J(i-1) + (|D(i-1,i)| - J(i-1))/16
    para calcular el Jitter. Como vemos, utiliza los valores de delta actual y el anterior, y el valor del Jitter anterior.


14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?

    ==> 24.8 segundos

 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?

    ==> 0xbf4afd37 y 0x43306582.
    ==> Uno para RTP y otro para H.261, respectivamente.
    ==> No, siempre el valor Contributing source identifiers count es 0.

15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?

    ==> Se utiliza el método BYE.

 ** ¿En qué trama(s)?

    ==> 924, 925, 927 y 933

 ** ¿Por qué crees que se envía varias veces?

    ==> Para asegurarse que el BYE llega, ya que el protocolo UDP no es fiable.

16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?

    ==> Se envía un REGISTER con tiempo Expires igual a 0, para "fingir" que su tiempo ha expirado y darse de baja.

 ** ¿En qué trama sucede esto?

    ==> 950 y 952 (Con el campo Authorization)

 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?

    ==> En el campo expires, que al principio era 3600.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?

        ==> Sí. Necesitamos DNS para conocer el nombre de nuestro destino, y STUN para atravesar el router NAT.

 ** ¿Son diferentes el registro y la descripción de la sesión?

        ==> Sí, hay una serie de peticiones (Suscribe, Publish) que no tenemos en la otra captura.

18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?

        ==> Tenemos 2 flujos: uno de 193.147.49.130 a 188.226.157.55 y otro en sentido inverso

 ** ¿Cuál es su periodicidad?

        ==> 20 ms

 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?

        ==> Respectivamente, 20.99, 0.21 y 0.32 para el flujo 188 => 193 y 20.20, 0.16 y 0.20 para el flujo 193 => 188

 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.

        ==> Sí, si en el menú Telephony=>VoIP Calls damos a play. Pierde calidad pues no puede soportar la variació de retardo, y cuando el buffer está lleno se pierde información.

 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?

        ==> Ofrece un servicio de audio. En el campo Payload time vemos "Payload type: ITU-T G.711 PCMA"

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
